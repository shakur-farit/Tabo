//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Code.Gameplay.Features.Dungeon;

public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherDungeonTypeId;

    public static Entitas.IMatcher<GameEntity> DungeonTypeId {
        get {
            if (_matcherDungeonTypeId == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.DungeonTypeId);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherDungeonTypeId = matcher;
            }

            return _matcherDungeonTypeId;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public DungeonTypeIdComponent dungeonTypeId { get { return (DungeonTypeIdComponent)GetComponent(GameComponentsLookup.DungeonTypeId); } }
    public DungeonTypeId DungeonTypeId { get { return dungeonTypeId.Value; } }
    public bool hasDungeonTypeId { get { return HasComponent(GameComponentsLookup.DungeonTypeId); } }

    public GameEntity AddDungeonTypeId(DungeonTypeId newValue) {
        var index = GameComponentsLookup.DungeonTypeId;
        var component = (DungeonTypeIdComponent)CreateComponent(index, typeof(DungeonTypeIdComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceDungeonTypeId(DungeonTypeId newValue) {
        var index = GameComponentsLookup.DungeonTypeId;
        var component = (DungeonTypeIdComponent)CreateComponent(index, typeof(DungeonTypeIdComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveDungeonTypeId() {
        RemoveComponent(GameComponentsLookup.DungeonTypeId);
        return this;
    }
}
