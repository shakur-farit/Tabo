//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Code.Gameplay.Features.Level;
using Code.Gameplay.Features.Level.Configs;

public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherEnemyWave;

    public static Entitas.IMatcher<GameEntity> EnemyWave {
        get {
            if (_matcherEnemyWave == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.EnemyWave);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherEnemyWave = matcher;
            }

            return _matcherEnemyWave;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public EnemyWaveComponent enemyWave { get { return (EnemyWaveComponent)GetComponent(GameComponentsLookup.EnemyWave); } }
    public EnemyWave EnemyWave { get { return enemyWave.Value; } }
    public bool hasEnemyWave { get { return HasComponent(GameComponentsLookup.EnemyWave); } }

    public GameEntity AddEnemyWave(EnemyWave newValue) {
        var index = GameComponentsLookup.EnemyWave;
        var component = (EnemyWaveComponent)CreateComponent(index, typeof(EnemyWaveComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceEnemyWave(EnemyWave newValue) {
        var index = GameComponentsLookup.EnemyWave;
        var component = (EnemyWaveComponent)CreateComponent(index, typeof(EnemyWaveComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveEnemyWave() {
        RemoveComponent(GameComponentsLookup.EnemyWave);
        return this;
    }
}
