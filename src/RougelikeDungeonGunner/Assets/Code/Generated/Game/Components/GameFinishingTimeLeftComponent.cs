//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Code.Gameplay.Features.Level;

public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherFinishingTimeLeft;

    public static Entitas.IMatcher<GameEntity> FinishingTimeLeft {
        get {
            if (_matcherFinishingTimeLeft == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.FinishingTimeLeft);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherFinishingTimeLeft = matcher;
            }

            return _matcherFinishingTimeLeft;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public FinishingTimeLeft finishingTimeLeft { get { return (FinishingTimeLeft)GetComponent(GameComponentsLookup.FinishingTimeLeft); } }
    public float FinishingTimeLeft { get { return finishingTimeLeft.Value; } }
    public bool hasFinishingTimeLeft { get { return HasComponent(GameComponentsLookup.FinishingTimeLeft); } }

    public GameEntity AddFinishingTimeLeft(float newValue) {
        var index = GameComponentsLookup.FinishingTimeLeft;
        var component = (FinishingTimeLeft)CreateComponent(index, typeof(FinishingTimeLeft));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceFinishingTimeLeft(float newValue) {
        var index = GameComponentsLookup.FinishingTimeLeft;
        var component = (FinishingTimeLeft)CreateComponent(index, typeof(FinishingTimeLeft));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveFinishingTimeLeft() {
        RemoveComponent(GameComponentsLookup.FinishingTimeLeft);
        return this;
    }
}
