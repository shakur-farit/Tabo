//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Code.Gameplay.Features.Level;

public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherLevelTypeId;

    public static Entitas.IMatcher<GameEntity> LevelTypeId {
        get {
            if (_matcherLevelTypeId == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.LevelTypeId);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherLevelTypeId = matcher;
            }

            return _matcherLevelTypeId;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public LevelTypeIdComponent levelTypeId { get { return (LevelTypeIdComponent)GetComponent(GameComponentsLookup.LevelTypeId); } }
    public LevelTypeId LevelTypeId { get { return levelTypeId.Value; } }
    public bool hasLevelTypeId { get { return HasComponent(GameComponentsLookup.LevelTypeId); } }

    public GameEntity AddLevelTypeId(LevelTypeId newValue) {
        var index = GameComponentsLookup.LevelTypeId;
        var component = (LevelTypeIdComponent)CreateComponent(index, typeof(LevelTypeIdComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceLevelTypeId(LevelTypeId newValue) {
        var index = GameComponentsLookup.LevelTypeId;
        var component = (LevelTypeIdComponent)CreateComponent(index, typeof(LevelTypeIdComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveLevelTypeId() {
        RemoveComponent(GameComponentsLookup.LevelTypeId);
        return this;
    }
}
