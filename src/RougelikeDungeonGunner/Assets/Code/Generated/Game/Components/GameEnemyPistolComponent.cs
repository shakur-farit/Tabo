//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherEnemyPistol;

    public static Entitas.IMatcher<GameEntity> EnemyPistol {
        get {
            if (_matcherEnemyPistol == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.EnemyPistol);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherEnemyPistol = matcher;
            }

            return _matcherEnemyPistol;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    static readonly Code.Gameplay.Features.Weapon.EnemyPistol enemyPistolComponent = new Code.Gameplay.Features.Weapon.EnemyPistol();

    public bool isEnemyPistol {
        get { return HasComponent(GameComponentsLookup.EnemyPistol); }
        set {
            if (value != isEnemyPistol) {
                var index = GameComponentsLookup.EnemyPistol;
                if (value) {
                    var componentPool = GetComponentPool(index);
                    var component = componentPool.Count > 0
                            ? componentPool.Pop()
                            : enemyPistolComponent;

                    AddComponent(index, component);
                } else {
                    RemoveComponent(index);
                }
            }
        }
    }
}
