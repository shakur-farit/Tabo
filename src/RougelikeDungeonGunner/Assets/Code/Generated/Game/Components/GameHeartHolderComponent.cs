//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Code.Meta.UI.Hud.HeartHolder.Behaviours;

public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherHeartHolder;

    public static Entitas.IMatcher<GameEntity> HeartHolder {
        get {
            if (_matcherHeartHolder == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.HeartHolder);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherHeartHolder = matcher;
            }

            return _matcherHeartHolder;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Hero.HeartHolderComponent heartHolder { get { return (Code.Gameplay.Features.Hero.HeartHolderComponent)GetComponent(GameComponentsLookup.HeartHolder); } }
    public HeartHolder HeartHolder { get { return heartHolder.Value; } }
    public bool hasHeartHolder { get { return HasComponent(GameComponentsLookup.HeartHolder); } }

    public GameEntity AddHeartHolder(HeartHolder newValue) {
        var index = GameComponentsLookup.HeartHolder;
        var component = (Code.Gameplay.Features.Hero.HeartHolderComponent)CreateComponent(index, typeof(Code.Gameplay.Features.Hero.HeartHolderComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceHeartHolder(HeartHolder newValue) {
        var index = GameComponentsLookup.HeartHolder;
        var component = (Code.Gameplay.Features.Hero.HeartHolderComponent)CreateComponent(index, typeof(Code.Gameplay.Features.Hero.HeartHolderComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveHeartHolder() {
        RemoveComponent(GameComponentsLookup.HeartHolder);
        return this;
    }
}
