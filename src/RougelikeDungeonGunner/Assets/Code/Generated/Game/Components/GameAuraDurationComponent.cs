//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherAuraDuration;

    public static Entitas.IMatcher<GameEntity> AuraDuration {
        get {
            if (_matcherAuraDuration == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.AuraDuration);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherAuraDuration = matcher;
            }

            return _matcherAuraDuration;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Ammo.AuraDuration auraDuration { get { return (Code.Gameplay.Features.Ammo.AuraDuration)GetComponent(GameComponentsLookup.AuraDuration); } }
    public float AuraDuration { get { return auraDuration.Value; } }
    public bool hasAuraDuration { get { return HasComponent(GameComponentsLookup.AuraDuration); } }

    public GameEntity AddAuraDuration(float newValue) {
        var index = GameComponentsLookup.AuraDuration;
        var component = (Code.Gameplay.Features.Ammo.AuraDuration)CreateComponent(index, typeof(Code.Gameplay.Features.Ammo.AuraDuration));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceAuraDuration(float newValue) {
        var index = GameComponentsLookup.AuraDuration;
        var component = (Code.Gameplay.Features.Ammo.AuraDuration)CreateComponent(index, typeof(Code.Gameplay.Features.Ammo.AuraDuration));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveAuraDuration() {
        RemoveComponent(GameComponentsLookup.AuraDuration);
        return this;
    }
}
