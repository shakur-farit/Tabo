//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherCurrentWeaponType;

    public static Entitas.IMatcher<GameEntity> CurrentWeaponType {
        get {
            if (_matcherCurrentWeaponType == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.CurrentWeaponType);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherCurrentWeaponType = matcher;
            }

            return _matcherCurrentWeaponType;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Hero.CurrentWeaponType currentWeaponType { get { return (Code.Gameplay.Features.Hero.CurrentWeaponType)GetComponent(GameComponentsLookup.CurrentWeaponType); } }
    public Code.Gameplay.Features.Weapon.WeaponTypeId CurrentWeaponType { get { return currentWeaponType.Value; } }
    public bool hasCurrentWeaponType { get { return HasComponent(GameComponentsLookup.CurrentWeaponType); } }

    public GameEntity AddCurrentWeaponType(Code.Gameplay.Features.Weapon.WeaponTypeId newValue) {
        var index = GameComponentsLookup.CurrentWeaponType;
        var component = (Code.Gameplay.Features.Hero.CurrentWeaponType)CreateComponent(index, typeof(Code.Gameplay.Features.Hero.CurrentWeaponType));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceCurrentWeaponType(Code.Gameplay.Features.Weapon.WeaponTypeId newValue) {
        var index = GameComponentsLookup.CurrentWeaponType;
        var component = (Code.Gameplay.Features.Hero.CurrentWeaponType)CreateComponent(index, typeof(Code.Gameplay.Features.Hero.CurrentWeaponType));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveCurrentWeaponType() {
        RemoveComponent(GameComponentsLookup.CurrentWeaponType);
        return this;
    }
}
