//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherMultiPellet;

    public static Entitas.IMatcher<GameEntity> MultiPellet {
        get {
            if (_matcherMultiPellet == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.MultiPellet);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherMultiPellet = matcher;
            }

            return _matcherMultiPellet;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Weapon.MultiPellet multiPellet { get { return (Code.Gameplay.Features.Weapon.MultiPellet)GetComponent(GameComponentsLookup.MultiPellet); } }
    public int MultiPellet { get { return multiPellet.Value; } }
    public bool hasMultiPellet { get { return HasComponent(GameComponentsLookup.MultiPellet); } }

    public GameEntity AddMultiPellet(int newValue) {
        var index = GameComponentsLookup.MultiPellet;
        var component = (Code.Gameplay.Features.Weapon.MultiPellet)CreateComponent(index, typeof(Code.Gameplay.Features.Weapon.MultiPellet));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceMultiPellet(int newValue) {
        var index = GameComponentsLookup.MultiPellet;
        var component = (Code.Gameplay.Features.Weapon.MultiPellet)CreateComponent(index, typeof(Code.Gameplay.Features.Weapon.MultiPellet));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveMultiPellet() {
        RemoveComponent(GameComponentsLookup.MultiPellet);
        return this;
    }
}
