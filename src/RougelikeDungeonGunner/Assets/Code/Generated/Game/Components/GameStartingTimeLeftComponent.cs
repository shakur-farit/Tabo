//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Code.Gameplay.Features.Level;

public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherStartingTimeLeft;

    public static Entitas.IMatcher<GameEntity> StartingTimeLeft {
        get {
            if (_matcherStartingTimeLeft == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.StartingTimeLeft);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherStartingTimeLeft = matcher;
            }

            return _matcherStartingTimeLeft;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public StartingTimeLeft startingTimeLeft { get { return (StartingTimeLeft)GetComponent(GameComponentsLookup.StartingTimeLeft); } }
    public float StartingTimeLeft { get { return startingTimeLeft.Value; } }
    public bool hasStartingTimeLeft { get { return HasComponent(GameComponentsLookup.StartingTimeLeft); } }

    public GameEntity AddStartingTimeLeft(float newValue) {
        var index = GameComponentsLookup.StartingTimeLeft;
        var component = (StartingTimeLeft)CreateComponent(index, typeof(StartingTimeLeft));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceStartingTimeLeft(float newValue) {
        var index = GameComponentsLookup.StartingTimeLeft;
        var component = (StartingTimeLeft)CreateComponent(index, typeof(StartingTimeLeft));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveStartingTimeLeft() {
        RemoveComponent(GameComponentsLookup.StartingTimeLeft);
        return this;
    }
}
