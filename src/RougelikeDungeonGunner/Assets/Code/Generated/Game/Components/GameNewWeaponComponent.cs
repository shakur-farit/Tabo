//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherNewWeapon;

    public static Entitas.IMatcher<GameEntity> NewWeapon {
        get {
            if (_matcherNewWeapon == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.NewWeapon);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherNewWeapon = matcher;
            }

            return _matcherNewWeapon;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Hero.NewWeapon newWeapon { get { return (Code.Gameplay.Features.Hero.NewWeapon)GetComponent(GameComponentsLookup.NewWeapon); } }
    public Code.Gameplay.Features.Weapon.WeaponTypeId NewWeapon { get { return newWeapon.Value; } }
    public bool hasNewWeapon { get { return HasComponent(GameComponentsLookup.NewWeapon); } }

    public GameEntity AddNewWeapon(Code.Gameplay.Features.Weapon.WeaponTypeId newValue) {
        var index = GameComponentsLookup.NewWeapon;
        var component = (Code.Gameplay.Features.Hero.NewWeapon)CreateComponent(index, typeof(Code.Gameplay.Features.Hero.NewWeapon));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceNewWeapon(Code.Gameplay.Features.Weapon.WeaponTypeId newValue) {
        var index = GameComponentsLookup.NewWeapon;
        var component = (Code.Gameplay.Features.Hero.NewWeapon)CreateComponent(index, typeof(Code.Gameplay.Features.Hero.NewWeapon));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveNewWeapon() {
        RemoveComponent(GameComponentsLookup.NewWeapon);
        return this;
    }
}
